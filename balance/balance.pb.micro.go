// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: balance.proto

package balance

import (
	fmt "fmt"
	proto "google.golang.org/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "go-micro.dev/v4/api"
	client "go-micro.dev/v4/client"
	server "go-micro.dev/v4/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for Balance service

func NewBalanceEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for Balance service

type BalanceService interface {
	// 系统余额
	SystemBalance(ctx context.Context, in *SystemBalanceRequest, opts ...client.CallOption) (*SystemBalanceResponse, error)
	// 商户余额
	MerchantBalance(ctx context.Context, in *MerchantBalanceRequest, opts ...client.CallOption) (*MerchantBalanceResponse, error)
}

type balanceService struct {
	c    client.Client
	name string
}

func NewBalanceService(name string, c client.Client) BalanceService {
	return &balanceService{
		c:    c,
		name: name,
	}
}

func (c *balanceService) SystemBalance(ctx context.Context, in *SystemBalanceRequest, opts ...client.CallOption) (*SystemBalanceResponse, error) {
	req := c.c.NewRequest(c.name, "Balance.SystemBalance", in)
	out := new(SystemBalanceResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *balanceService) MerchantBalance(ctx context.Context, in *MerchantBalanceRequest, opts ...client.CallOption) (*MerchantBalanceResponse, error) {
	req := c.c.NewRequest(c.name, "Balance.MerchantBalance", in)
	out := new(MerchantBalanceResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Balance service

type BalanceHandler interface {
	// 系统余额
	SystemBalance(context.Context, *SystemBalanceRequest, *SystemBalanceResponse) error
	// 商户余额
	MerchantBalance(context.Context, *MerchantBalanceRequest, *MerchantBalanceResponse) error
}

func RegisterBalanceHandler(s server.Server, hdlr BalanceHandler, opts ...server.HandlerOption) error {
	type balance interface {
		SystemBalance(ctx context.Context, in *SystemBalanceRequest, out *SystemBalanceResponse) error
		MerchantBalance(ctx context.Context, in *MerchantBalanceRequest, out *MerchantBalanceResponse) error
	}
	type Balance struct {
		balance
	}
	h := &balanceHandler{hdlr}
	return s.Handle(s.NewHandler(&Balance{h}, opts...))
}

type balanceHandler struct {
	BalanceHandler
}

func (h *balanceHandler) SystemBalance(ctx context.Context, in *SystemBalanceRequest, out *SystemBalanceResponse) error {
	return h.BalanceHandler.SystemBalance(ctx, in, out)
}

func (h *balanceHandler) MerchantBalance(ctx context.Context, in *MerchantBalanceRequest, out *MerchantBalanceResponse) error {
	return h.BalanceHandler.MerchantBalance(ctx, in, out)
}
