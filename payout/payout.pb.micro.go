// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: payout.proto

package Payout

import (
	fmt "fmt"
	proto "google.golang.org/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "go-micro.dev/v4/api"
	client "go-micro.dev/v4/client"
	server "go-micro.dev/v4/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for PayoutOrder service

func NewPayoutOrderEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for PayoutOrder service

type PayoutOrderService interface {
	// 新增 收单
	PaymentOrderAndPay(ctx context.Context, in *PayoutRequest, opts ...client.CallOption) (*PayoutResponse, error)
	PaymentOrderQuery(ctx context.Context, in *PayoutQueryRequest, opts ...client.CallOption) (*PayoutQueryResponse, error)
	PaymentOrderQueryPage(ctx context.Context, in *PayoutQueryPageRequest, opts ...client.CallOption) (*PayoutQueryPageResponse, error)
}

type payoutOrderService struct {
	c    client.Client
	name string
}

func NewPayoutOrderService(name string, c client.Client) PayoutOrderService {
	return &payoutOrderService{
		c:    c,
		name: name,
	}
}

func (c *payoutOrderService) PaymentOrderAndPay(ctx context.Context, in *PayoutRequest, opts ...client.CallOption) (*PayoutResponse, error) {
	req := c.c.NewRequest(c.name, "PayoutOrder.PaymentOrderAndPay", in)
	out := new(PayoutResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *payoutOrderService) PaymentOrderQuery(ctx context.Context, in *PayoutQueryRequest, opts ...client.CallOption) (*PayoutQueryResponse, error) {
	req := c.c.NewRequest(c.name, "PayoutOrder.PaymentOrderQuery", in)
	out := new(PayoutQueryResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *payoutOrderService) PaymentOrderQueryPage(ctx context.Context, in *PayoutQueryPageRequest, opts ...client.CallOption) (*PayoutQueryPageResponse, error) {
	req := c.c.NewRequest(c.name, "PayoutOrder.PaymentOrderQueryPage", in)
	out := new(PayoutQueryPageResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for PayoutOrder service

type PayoutOrderHandler interface {
	// 新增 收单
	PaymentOrderAndPay(context.Context, *PayoutRequest, *PayoutResponse) error
	PaymentOrderQuery(context.Context, *PayoutQueryRequest, *PayoutQueryResponse) error
	PaymentOrderQueryPage(context.Context, *PayoutQueryPageRequest, *PayoutQueryPageResponse) error
}

func RegisterPayoutOrderHandler(s server.Server, hdlr PayoutOrderHandler, opts ...server.HandlerOption) error {
	type payoutOrder interface {
		PaymentOrderAndPay(ctx context.Context, in *PayoutRequest, out *PayoutResponse) error
		PaymentOrderQuery(ctx context.Context, in *PayoutQueryRequest, out *PayoutQueryResponse) error
		PaymentOrderQueryPage(ctx context.Context, in *PayoutQueryPageRequest, out *PayoutQueryPageResponse) error
	}
	type PayoutOrder struct {
		payoutOrder
	}
	h := &payoutOrderHandler{hdlr}
	return s.Handle(s.NewHandler(&PayoutOrder{h}, opts...))
}

type payoutOrderHandler struct {
	PayoutOrderHandler
}

func (h *payoutOrderHandler) PaymentOrderAndPay(ctx context.Context, in *PayoutRequest, out *PayoutResponse) error {
	return h.PayoutOrderHandler.PaymentOrderAndPay(ctx, in, out)
}

func (h *payoutOrderHandler) PaymentOrderQuery(ctx context.Context, in *PayoutQueryRequest, out *PayoutQueryResponse) error {
	return h.PayoutOrderHandler.PaymentOrderQuery(ctx, in, out)
}

func (h *payoutOrderHandler) PaymentOrderQueryPage(ctx context.Context, in *PayoutQueryPageRequest, out *PayoutQueryPageResponse) error {
	return h.PayoutOrderHandler.PaymentOrderQueryPage(ctx, in, out)
}
