// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: settlement.proto

package settlement

import (
	fmt "fmt"
	proto "google.golang.org/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "go-micro.dev/v4/api"
	client "go-micro.dev/v4/client"
	server "go-micro.dev/v4/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for Settlement service

func NewSettlementEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for Settlement service

type SettlementService interface {
	Query(ctx context.Context, in *QueryRequest, opts ...client.CallOption) (*QueryResponse, error)
	QueryPage(ctx context.Context, in *QueryPageRequest, opts ...client.CallOption) (*QueryPageResponse, error)
}

type settlementService struct {
	c    client.Client
	name string
}

func NewSettlementService(name string, c client.Client) SettlementService {
	return &settlementService{
		c:    c,
		name: name,
	}
}

func (c *settlementService) Query(ctx context.Context, in *QueryRequest, opts ...client.CallOption) (*QueryResponse, error) {
	req := c.c.NewRequest(c.name, "Settlement.Query", in)
	out := new(QueryResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *settlementService) QueryPage(ctx context.Context, in *QueryPageRequest, opts ...client.CallOption) (*QueryPageResponse, error) {
	req := c.c.NewRequest(c.name, "Settlement.QueryPage", in)
	out := new(QueryPageResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Settlement service

type SettlementHandler interface {
	Query(context.Context, *QueryRequest, *QueryResponse) error
	QueryPage(context.Context, *QueryPageRequest, *QueryPageResponse) error
}

func RegisterSettlementHandler(s server.Server, hdlr SettlementHandler, opts ...server.HandlerOption) error {
	type settlement interface {
		Query(ctx context.Context, in *QueryRequest, out *QueryResponse) error
		QueryPage(ctx context.Context, in *QueryPageRequest, out *QueryPageResponse) error
	}
	type Settlement struct {
		settlement
	}
	h := &settlementHandler{hdlr}
	return s.Handle(s.NewHandler(&Settlement{h}, opts...))
}

type settlementHandler struct {
	SettlementHandler
}

func (h *settlementHandler) Query(ctx context.Context, in *QueryRequest, out *QueryResponse) error {
	return h.SettlementHandler.Query(ctx, in, out)
}

func (h *settlementHandler) QueryPage(ctx context.Context, in *QueryPageRequest, out *QueryPageResponse) error {
	return h.SettlementHandler.QueryPage(ctx, in, out)
}
